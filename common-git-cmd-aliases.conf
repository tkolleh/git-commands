# ## Usage
#
# Save this file somewhere on your system E.g.:
#
#      ~/.local/share/git/common-git-cmd-aliases.conf
#
# Edit ~/.gitconfig to include this file:
#
#      vim ~/.gitconfig
#
# Include the path to the alias file:
#
#     [include]
#     path = ~/.local/share/git/common-git-cmd-aliases.conf
#
## License
#
# Created by TJ Kolleh
# This file is licensed under the MIT License.
# See <https://opensource.org/licenses/MIT> for details.
#
# [Assume](https://www.durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/#:~:text=m%20%7B%7D%20done%2D%7B%7D%3B%20%7D%3B%20f%22-,Assume%20aliases,-If%20you%20interact)
#
[alias]
  # Assume/Unassume aliases
  assume = update-index --assume-unchanged           # assume file unchanged
  unassume = update-index --no-assume-unchanged      # unassume file
  assumed = "!git ls-files -v | grep ^h | cut -c 3-" # show assumed files
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged" # unassume all assumed files

  # Branch operations
  br = branch -v                     # branch (verbose)

  # Checkout operations
  co = checkout                      # checkout shortcut
  discard = checkout --              # discard changes
  main = checkout main               # checkout main branch
  master = checkout master           # checkout master branch
  nb = checkout -b                   # create and switch to new branch

  # Cherry-pick operations
  cp = cherry-pick                   # cherry-pick
  cpa = cherry-pick --abort          # abort cherry-pick
  cpc = cherry-pick --continue       # continue cherry-pick
  cpn = cherry-pick --no-commit      # cherry-pick without commit

  # Commit operations
  amend = commit --amend             # amend last commit
  cam = commit --amend --message     # amend and edit message

  # Log operations
  bullets = log --pretty=format:" * %s" # Markdown bullet list
  changes = log --oneline --reverse  # commit messages with hash
  filelog = log -u                   # show changes to a file
  
  # History graphs
  lh = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  lg = log --graph --date=short      # history graph with short dates
  
  # File change logs
  ll = log --pretty=format:"%h %cr %cn %Cgreen%s%Creset" --name-status
  short = log --pretty=format:"%h %cr %cn %Cgreen%s%Creset"
  lastfiles = "!git ll -1"          # show changed files for last commit

  # Diff operations
  dc = diff --cached                 # diff cached
  diffto = "!diffto() { local count=$1; shift; git diff HEAD~$count $*; }; diffto" # diff to X commits back
  dt = diffto                        # diffto shortcut

  # Grep operations
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

  # Repository navigation
  gt = "!gtcd() { cd $(git rev-parse --show-toplevel);}; gtcd" # cd to top level
  top = rev-parse --show-toplevel    # show top level folder
  ignored = status --ignored         # show ignored files

  # Configuration
  la = "!git config -l | grep alias | cut -c 7-" # list all aliases

  # File operations
  ls = ls-files                      # list tracked files
  lsi = ls-files --ignored --exclude-standard # list ignored files
  lsio = ls-files --ignored --others --exclude-standard # list ignored/unstaged files
  
  # Merge/remote operations
  mt = mergetool                     # launch merge tool
  origin = remote show origin        # show origin info
  
  # Push/pull operations
  p = pull                           # pull shortcut
  pp = push                          # push shortcut
  pullm = pull origin main           # pull main branch
  
  # Remove operations
  rmc = "rm -r --cached"             # remove from cache

  # Undo operations
  undo = "!git branch $1 && git reset --hard HEAD~$2 && git switch $1" # undo commits to new branch

  # Branch management
  done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f" # mark branch as done

  # Rebase operations
  rb = rebase                        # rebase
  rba = rebase --abort               # abort rebase
  rbc = rebase --continue            # continue rebase
  rbs = rebase --skip                # skip patch
  rbi = rebase --interactive         # interactive rebase

  # Remote operations
  remotes = remote -v                # show remotes (verbose)

  # Reset operations
  reset = reset                      # basic reset
  r1 = reset HEAD^                   # reset to last commit
  r2 = reset HEAD^^                  # reset two commits back
  rh = reset --hard                  # hard reset
  rh1 = reset HEAD^ --hard           # hard reset to last commit
  rh2 = reset HEAD^^ --hard          # hard reset two commits back
  uncommit = reset --soft HEAD^      # undo last commit, keep changes
  unstage = reset HEAD               # unstage files

  # Stash operations
  sa = stash apply                   # apply stash
  sd = stash drop                    # drop stash
  sl = stash list                    # list stashes
  ss = stash save                    # save stash

  # Status operations
  s = status                         # status shortcut
  st = status -sb                    # short status with branch info

  # Submodule operations
  subinit = submodule update --init  # init submodules
  subup = submodule foreach git pull origin # update all submodules

  # Tag operations
  tags = tag -n1 -l                  # list all tags
  lasttag = describe --always --tag --abbrev=0 # show last tag
